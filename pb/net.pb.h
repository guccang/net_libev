// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2eproto();
void protobuf_AssignDesc_net_2eproto();
void protobuf_ShutdownFile_net_2eproto();

class notify;
class login;
class people;
class people_skill;

enum c2sid {
  guc_c2s_begin = 0,
  guc_test_notify = 1,
  guc_test_people = 2,
  guc_c2s_login = 2000,
  guc_c2s_end = 88888
};
bool c2sid_IsValid(int value);
const c2sid c2sid_MIN = guc_c2s_begin;
const c2sid c2sid_MAX = guc_c2s_end;
const int c2sid_ARRAYSIZE = c2sid_MAX + 1;

const ::google::protobuf::EnumDescriptor* c2sid_descriptor();
inline const ::std::string& c2sid_Name(c2sid value) {
  return ::google::protobuf::internal::NameOfEnum(
    c2sid_descriptor(), value);
}
inline bool c2sid_Parse(
    const ::std::string& name, c2sid* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c2sid>(
    c2sid_descriptor(), name, value);
}
// ===================================================================

class notify : public ::google::protobuf::Message {
 public:
  notify();
  virtual ~notify();

  notify(const notify& from);

  inline notify& operator=(const notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notify& default_instance();

  void Swap(notify* other);

  // implements Message ----------------------------------------------

  notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notify& from);
  void MergeFrom(const notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:PB.notify)
 private:
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* str_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static notify* default_instance_;
};
// -------------------------------------------------------------------

class login : public ::google::protobuf::Message {
 public:
  login();
  virtual ~login();

  login(const login& from);

  inline login& operator=(const login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login& default_instance();

  void Swap(login* other);

  // implements Message ----------------------------------------------

  login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login& from);
  void MergeFrom(const login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string pwd_md5 = 3;
  inline bool has_pwd_md5() const;
  inline void clear_pwd_md5();
  static const int kPwdMd5FieldNumber = 3;
  inline const ::std::string& pwd_md5() const;
  inline void set_pwd_md5(const ::std::string& value);
  inline void set_pwd_md5(const char* value);
  inline void set_pwd_md5(const char* value, size_t size);
  inline ::std::string* mutable_pwd_md5();
  inline ::std::string* release_pwd_md5();
  inline void set_allocated_pwd_md5(::std::string* pwd_md5);

  // @@protoc_insertion_point(class_scope:PB.login)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_pwd_md5();
  inline void clear_has_pwd_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* pwd_md5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static login* default_instance_;
};
// -------------------------------------------------------------------

class people_skill : public ::google::protobuf::Message {
 public:
  people_skill();
  virtual ~people_skill();

  people_skill(const people_skill& from);

  inline people_skill& operator=(const people_skill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const people_skill& default_instance();

  void Swap(people_skill* other);

  // implements Message ----------------------------------------------

  people_skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const people_skill& from);
  void MergeFrom(const people_skill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 skillid = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // required string skillname = 2;
  inline bool has_skillname() const;
  inline void clear_skillname();
  static const int kSkillnameFieldNumber = 2;
  inline const ::std::string& skillname() const;
  inline void set_skillname(const ::std::string& value);
  inline void set_skillname(const char* value);
  inline void set_skillname(const char* value, size_t size);
  inline ::std::string* mutable_skillname();
  inline ::std::string* release_skillname();
  inline void set_allocated_skillname(::std::string* skillname);

  // @@protoc_insertion_point(class_scope:PB.people.skill)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skillname();
  inline void clear_has_skillname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* skillname_;
  ::google::protobuf::int32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static people_skill* default_instance_;
};
// -------------------------------------------------------------------

class people : public ::google::protobuf::Message {
 public:
  people();
  virtual ~people();

  people(const people& from);

  inline people& operator=(const people& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const people& default_instance();

  void Swap(people* other);

  // implements Message ----------------------------------------------

  people* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const people& from);
  void MergeFrom(const people& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef people_skill skill;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline float power() const;
  inline void set_power(float value);

  // repeated .PB.people.skill skills = 4;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 4;
  inline const ::PB::people_skill& skills(int index) const;
  inline ::PB::people_skill* mutable_skills(int index);
  inline ::PB::people_skill* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::people_skill >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::people_skill >*
      mutable_skills();

  // @@protoc_insertion_point(class_scope:PB.people)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  float power_;
  ::google::protobuf::RepeatedPtrField< ::PB::people_skill > skills_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static people* default_instance_;
};
// ===================================================================


// ===================================================================

// notify

// required string str = 1;
inline bool notify::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notify::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notify::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notify::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& notify::str() const {
  return *str_;
}
inline void notify::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void notify::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void notify::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* notify::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* notify::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void notify::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// login

// required string account = 2;
inline bool login::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& login::account() const {
  return *account_;
}
inline void login::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void login::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void login::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* login::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pwd_md5 = 3;
inline bool login::has_pwd_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login::set_has_pwd_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login::clear_has_pwd_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login::clear_pwd_md5() {
  if (pwd_md5_ != &::google::protobuf::internal::kEmptyString) {
    pwd_md5_->clear();
  }
  clear_has_pwd_md5();
}
inline const ::std::string& login::pwd_md5() const {
  return *pwd_md5_;
}
inline void login::set_pwd_md5(const ::std::string& value) {
  set_has_pwd_md5();
  if (pwd_md5_ == &::google::protobuf::internal::kEmptyString) {
    pwd_md5_ = new ::std::string;
  }
  pwd_md5_->assign(value);
}
inline void login::set_pwd_md5(const char* value) {
  set_has_pwd_md5();
  if (pwd_md5_ == &::google::protobuf::internal::kEmptyString) {
    pwd_md5_ = new ::std::string;
  }
  pwd_md5_->assign(value);
}
inline void login::set_pwd_md5(const char* value, size_t size) {
  set_has_pwd_md5();
  if (pwd_md5_ == &::google::protobuf::internal::kEmptyString) {
    pwd_md5_ = new ::std::string;
  }
  pwd_md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login::mutable_pwd_md5() {
  set_has_pwd_md5();
  if (pwd_md5_ == &::google::protobuf::internal::kEmptyString) {
    pwd_md5_ = new ::std::string;
  }
  return pwd_md5_;
}
inline ::std::string* login::release_pwd_md5() {
  clear_has_pwd_md5();
  if (pwd_md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_md5_;
    pwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login::set_allocated_pwd_md5(::std::string* pwd_md5) {
  if (pwd_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_md5_;
  }
  if (pwd_md5) {
    set_has_pwd_md5();
    pwd_md5_ = pwd_md5;
  } else {
    clear_has_pwd_md5();
    pwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// people_skill

// required int32 skillid = 1;
inline bool people_skill::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void people_skill::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void people_skill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void people_skill::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 people_skill::skillid() const {
  return skillid_;
}
inline void people_skill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required string skillname = 2;
inline bool people_skill::has_skillname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void people_skill::set_has_skillname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void people_skill::clear_has_skillname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void people_skill::clear_skillname() {
  if (skillname_ != &::google::protobuf::internal::kEmptyString) {
    skillname_->clear();
  }
  clear_has_skillname();
}
inline const ::std::string& people_skill::skillname() const {
  return *skillname_;
}
inline void people_skill::set_skillname(const ::std::string& value) {
  set_has_skillname();
  if (skillname_ == &::google::protobuf::internal::kEmptyString) {
    skillname_ = new ::std::string;
  }
  skillname_->assign(value);
}
inline void people_skill::set_skillname(const char* value) {
  set_has_skillname();
  if (skillname_ == &::google::protobuf::internal::kEmptyString) {
    skillname_ = new ::std::string;
  }
  skillname_->assign(value);
}
inline void people_skill::set_skillname(const char* value, size_t size) {
  set_has_skillname();
  if (skillname_ == &::google::protobuf::internal::kEmptyString) {
    skillname_ = new ::std::string;
  }
  skillname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* people_skill::mutable_skillname() {
  set_has_skillname();
  if (skillname_ == &::google::protobuf::internal::kEmptyString) {
    skillname_ = new ::std::string;
  }
  return skillname_;
}
inline ::std::string* people_skill::release_skillname() {
  clear_has_skillname();
  if (skillname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skillname_;
    skillname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void people_skill::set_allocated_skillname(::std::string* skillname) {
  if (skillname_ != &::google::protobuf::internal::kEmptyString) {
    delete skillname_;
  }
  if (skillname) {
    set_has_skillname();
    skillname_ = skillname;
  } else {
    clear_has_skillname();
    skillname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// people

// required int32 id = 1;
inline bool people::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void people::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void people::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void people::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 people::id() const {
  return id_;
}
inline void people::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool people::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void people::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void people::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void people::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& people::name() const {
  return *name_;
}
inline void people::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void people::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void people::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* people::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* people::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void people::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float power = 3;
inline bool people::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void people::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void people::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void people::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float people::power() const {
  return power_;
}
inline void people::set_power(float value) {
  set_has_power();
  power_ = value;
}

// repeated .PB.people.skill skills = 4;
inline int people::skills_size() const {
  return skills_.size();
}
inline void people::clear_skills() {
  skills_.Clear();
}
inline const ::PB::people_skill& people::skills(int index) const {
  return skills_.Get(index);
}
inline ::PB::people_skill* people::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::PB::people_skill* people::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::people_skill >&
people::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::people_skill >*
people::mutable_skills() {
  return &skills_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::c2sid>() {
  return ::PB::c2sid_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
